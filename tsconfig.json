{
  "compilerOptions": {
    "paths": {//配合webpack alias 字段的配置 
      "reducers/*": ["src/store/reducers/*"],
      "router/*": ["src/router/*"],
      "store/*":["src/store/*"],
      "components/*":["src/components/*"],
      "utils/*":["src/utils/*"],
      "config/*":["config/*"],
      "public/*":["src/public/*"],
      "actions/*":["src/store/actions/*"],
      "constants/*":["src/store/constants/*"],
      "servies/*":["src/servies/*"]
    },
    "types": [ "lodash" ],
    "module": "esnext", 
    "target": "ES5", // 编译成 ES2015 (Babel 将做剩下的事情)
    "baseUrl": "./", // 可以相对这个目录 import 文件
    "sourceMap": true, // 使 TypeScript 生成 sourcemaps 
    "outDir": "dist", // 构建输出目录 (因为我们大部分时间都在使用 Webpack，所以不太相关)
    "jsx": "react", 
    "strict": true,  
    "allowJs":false,
    "importHelpers": true,//
    "locale":"en-us",
    "lib": ["esnext", "es7", "es6", "es5", "es2015.Promise", "es2015.Generator", "dom","es2015.Reflect","esnext.asynciterable"],
    "moduleResolution": "node",
    "noImplicitAny":false,//避免类型检查
    "emitDecoratorMetadata":true,// 给源码里的装饰器声明加上设计类型元数据
    "experimentalDecorators":true,//启用实验性的装饰器
    "noImplicitThis":true,//当 this表达式的值为 any类型的时候，生成一个错误
    // "traceResolution":true,// 生成模块解析日志信息
    "allowSyntheticDefaultImports": true  //允许从没有设置默认导出的模块中默认导入。这并不影响代码的显示，仅为了类型检查
  },
  "exclude": ["dist", "build", "node_modules"]// 这些目录下的代码不会被 typescript 处理
}